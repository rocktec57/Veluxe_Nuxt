import type { I18nHeadMetaInfo, MetaAttrs, LocaleObject, I18nHeadOptions, SeoAttributesOptions } from '#internal-i18n-types';
import type { CommonComposableOptions } from '../utils.js';
export type HeadContext = {
    key: string;
    seo: boolean | SeoAttributesOptions | undefined;
    currentDir: string;
    currentLocale: LocaleObject<string>;
    currentLanguage: string | undefined;
    baseUrl: string;
    locale: string;
    locales: LocaleObject<string>[];
};
export declare function creatHeadContext({ key, seo }: Required<Pick<I18nHeadOptions, 'key' | 'seo'>>): HeadContext;
/**
 * Returns localized head properties for locale-related aspects.
 *
 * @param common - Common options used internally by composable functions.
 * @param options - An options, see about details {@link I18nHeadOptions}.
 *
 * @returns The localized {@link I18nHeadMetaInfo | head properties}.
 *
 * @public
 */
export declare function localeHead(common: CommonComposableOptions, { dir, lang, seo, key }: I18nHeadOptions): I18nHeadMetaInfo;
export declare function getHreflangLinks(common: CommonComposableOptions, ctx: HeadContext): MetaAttrs[];
export declare function getCanonicalUrl(common: CommonComposableOptions, ctx: HeadContext): string;
export declare function getCanonicalLink(common: CommonComposableOptions, ctx: HeadContext): {
    [x: string]: string;
    rel: string;
    href: string;
}[];
export declare function getCanonicalQueryParams(common: CommonComposableOptions, ctx: HeadContext): string | undefined;
export declare function getOgUrl(common: CommonComposableOptions, ctx: HeadContext): {
    [x: string]: string;
    property: string;
    content: string;
}[];
export declare function getCurrentOgLocale(ctx: HeadContext): {
    [x: string]: string;
    property: string;
    content: string;
}[];
export declare function getAlternateOgLocales(ctx: HeadContext): {
    [x: string]: string;
    property: string;
    content: string;
}[];
